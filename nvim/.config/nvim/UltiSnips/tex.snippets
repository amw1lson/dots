global !p
def math():
    # is in math context
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    # is in comment context
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    # is in 'name' environment (itemize, array, etc.)
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

def create_matrix_placeholders(snip):
    # Create anonymous snippet body
    anon_snippet_body = ""

    # Get start and end line number of expanded snippet
    start = snip.snippet_start[0]
    end = snip.snippet_end[0]

    # Append current line into anonymous snippet
    for i in range(start, end + 1):
	    anon_snippet_body += snip.buffer[i]
	    anon_snippet_body += "" if i == end else "\n"

    # Delete expanded snippet line till second to last line
    for i in range(start, end):
	    del snip.buffer[start]

    # Empty last expanded snippet line while preserving the line
    snip.buffer[start] = ''

    # Expand anonymous snippet
    snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
    res = ""
    placeholder = 1
    for _ in range(0, int(rows)):
	    res += start + f"${placeholder} "
	    placeholder += 1
	    for _ in range(0, int(cols) - 1):
		    res += sep + f" ${placeholder} "
		    placeholder += 1
	    res += end
    return res[:-1]
endglobal

snippet beg "\begin{} \end{}" bA
\begin{$1}
$2
\end{$1}
$0
endsnippet

priority 100
context "math()"
post_jump "create_matrix_placeholders(snip)"
snippet 'arr (\d+),(\d+)' "LaTeX array" br
\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{array}
endsnippet

priority 100
context "math()"
post_jump "create_matrix_placeholders(snip)"
snippet 'mat (\d+),(\d+)' "LaTeX array" br
\begin{matrix}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{matrix}
endsnippet

priority 100
context "math()"
post_jump "create_matrix_placeholders(snip)"
snippet 'bmat (\d+),(\d+)' "LaTeX array" br
\begin{bmatrix}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{bmatrix}
endsnippet

priority 100
context "math()"
post_jump "create_matrix_placeholders(snip)"
snippet 'vmat (\d+),(\d+)' "LaTeX array" br
\begin{vmatrix}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{vmatrix}
endsnippet

priority 10
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

priority 10
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet mk "Inline Math" wA
\$$1\$$2
endsnippet

snippet dm "Math" wA
\[
$1
\] $0
endsnippet

context "math()"
snippet for "forall" wA
\forall
endsnippet

context "math()"
snippet in "in" wA
\in
endsnippet

context "math()"
snippet gre "greater or equal" wA
\geq
endsnippet

context "math()"
snippet les "less or equal" wA
\leq
endsnippet

context "math()"
snippet un "union" wA
\bigcup
endsnippet

context "math()"
snippet int "intersection" wA
\bigcap
endsnippet

context "math()"
snippet sum "summation" wA
\sum_{$1}^{$2} $0
endsnippet

context "math()"
snippet exi "exists" wA
\exists
endsnippet
